rules_version = '2';

service cloud.firestore {
  	match /databases/{database}/documents {

		// This rule allows anyone with your Firestore database reference to view, edit,
		// and delete all data in your Firestore database. It is useful for getting
		// started, but it is configured to expire after 30 days because it
		// leaves your app open to attackers. At that time, all client
		// requests to your Firestore database will be denied.
		//
		// Make sure to write security rules for your app before that time, or else
		// all client requests to your Firestore database will be denied until you Update
		// your rules

		// request.auth != null // means user must be logged in with Firebase's auth (Google Login)
		// request.auth.uid == {docID} // means user (requester) can only access/edit their own assigned document

		function isAdmin() {
			return request.auth.uid != null && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
		}

		match /players/{playerID} {
			// User can only read and update their own data
			allow get:
				if request.auth != null &&
				request.auth.uid == playerID;
			// User can only create their own data if they are logged in
			allow update, create:
				if request.auth != null &&
				request.resource.data.keys().hasAll(["name", "email"]);
			
			// Admins can do anything to all players
			allow read, write:
				if isAdmin();
		}

		match /admins/{adminID} {
			// Admins can do anything to all admins
			allow read, write:
				if isAdmin();
		}

		match /playerCharacters/{playerCharacterID} {
			// Players can only read their own data (owned from resource.data.playerID)
			allow read:
				if (request.auth != null && request.auth.uid == resource.data.playerID);
			// Players can only create/update their own data (owned from resource.data.playerID)
			allow create, update:
				if (request.auth != null && request.auth.uid == resource.data.playerID) &&
				request.resource.data.keys().hasAll(["playerID", "name", "level", "gold"]);
			
			// Admins can do anything to all playerCharacters
			allow read, write:
				if isAdmin();
		}
    

  	}
}