rules_version = '2';

service cloud.firestore {
  	match /databases/{database}/documents {

		// This rule allows anyone with your Firestore database reference to view, edit,
		// and delete all data in your Firestore database. It is useful for getting
		// started, but it is configured to expire after 30 days because it
		// leaves your app open to attackers. At that time, all client
		// requests to your Firestore database will be denied.
		//
		// Make sure to write security rules for your app before that time, or else
		// all client requests to your Firestore database will be denied until you Update
		// your rules

		// request.auth != null // means user must be logged in with Firebase's auth (Google Login)
		// request.auth.uid == {docID} // means user (requester) can only access/edit their own assigned document

		// WARNING: DO NOT DEPLOY THIS RULE. THIS IS FOR SEEDING PURPOSES ONLY.
		match /{document=**} {
			allow write: if !exists(/databases/$(database)/documents/players/lypfuBmpWHRrpxVTE4Ytk1pTWrw1) && request.time < timestamp.date(2024, 1, 31);
    	}

		function isAdmin() {
			return request.auth.uid != null && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
		}

		function timeWithin(time, durationSeconds) {
			return request.time - time <= duration.value(durationSeconds, 's');
		}

		match /players/{playerID} {

			function owned() {
				return request.auth != null && request.auth.uid == playerID;
			}

			// User can only read and update their own data
			allow get:
				if owned();
			// User can only create their own data if they are logged in
			allow create:
				if owned() &&
				"name" in request.resource.data &&
				"email" in request.resource.data &&
				request.resource.data.keys().size() == 2;

			// TODO Should player be able to update their own data?
			
			// Admins can do anything to all players
			allow read, write:
				if isAdmin();
		}

		match /admins/{adminID} {
			// Admins can do anything to all admins
			allow read, write:
				if isAdmin();
		}

		match /playerCharacters/{playerCharacterID} {

			// Returns if the player's authenticated uid is equal to the existing player character's playerID
			function playerOwned() {
				return request.auth != null && request.auth.uid == resource.data.playerID;
			}


			// Players can only read their own data (owned from resource.data.playerID)
			allow read:
				if playerOwned();
			

			// Players can only create/update their own data (owned from resource.data.playerID)
			allow create:
				if (request.auth != null && request.auth.uid == request.resource.data.playerID) && // Players' playerID must be equal to their auth uid
				// Fields Check
				"playerID" in request.resource.data &&
				"tierID" in request.resource.data &&
				"name" in request.resource.data &&
				"createdTimestamp" in request.resource.data &&
				request.resource.data.keys().size() == 4 &&
				// Values Check
				exists(/databases/$(database)/documents/playerCharacterTiers/$(request.resource.data.tierID)) && // Tier ID must exist
				timeWithin(request.resource.data.createdTimestamp, 300); // createdTimestamp must be within 5 minutes upon the server receiving it
			

			// TODO: Should players be able to update their character data?
			//allow update:
			//	if playerOwned() && // Players must own their own character
			//	"updatedTimestamp" in request.resource.data && // updatedTimestamp must exist
			//	timeWithin(request.resource.data.updatedTimestamp, 300) // updatedTimestamp must be within 5 minutes upon the server receiving it
			

			// Admins can do anything to all playerCharacters
			allow read, write:
				if isAdmin(); //&&
				// // Fields Check
				// "updatedTimestamp" in request.resource.data &&
				// // Values Check
				// timeWithin(request.resource.data.updatedTimestamp, 300) // updatedTimestamp must be within 5 minutes upon the server receiving it

		}
    

  	}
}