rules_version = '2';

service cloud.firestore {
  	match /databases/{database}/documents {

		// WARNING: DO NOT DEPLOY THIS RULE. THIS IS FOR SEEDING PURPOSES ONLY.
		match /{document=**} {
			allow write:
				if !exists(/databases/$(database)/documents/players/lypfuBmpWHRrpxVTE4Ytk1pTWrw1) && request.time < timestamp.date(2024, 1, 31);
    	}
		// END OF WARNING

		function isAdmin() {
			return
				request.auth.uid != null &&
				exists(/databases/$(database)/documents/admins/$(request.auth.uid));
		}

		function timeWithin(time, durationSeconds) {
			return
				request.time - time <= duration.value(durationSeconds, 's');
		}

		function levelValid(level) {
			return
				level is int &&
				level >= 1 && level <= 20;
		}

		function goldValid(gold) {
			return
				gold is number;
		}

		match /players/{playerID} {

			function owns() {
				return
					request.auth != null &&
					request.auth.uid == playerID;
			}

			// User can only read and update their own data
			allow get:
				if owns();
			// User can only create their own data if they are logged in
			allow create:
				if owns() &&
				"name" in request.resource.data &&
				"email" in request.resource.data &&
				// Required: "name", "email" (2)
				// Optional:  (0)
				// Must NOT:  (0)
				// Total: 2 <= size <= 2
				request.resource.data.keys().size() == 2;
			
			// Admins can read or update any player
			allow read, update:
				if isAdmin();
		}

		match /admins/{adminID} {
			// Admins can do anything to all admins
			allow read, write:
				if isAdmin();
		}

		match /playerCharacters/{playerCharacterID} {

			// Returns if the player's authenticated uid is equal to the existing player character's playerID
			function ownsCharacter() {
				return
					request.auth != null && request.auth.uid == resource.data.playerID;
			}

			function hasBasicFields() {
				return
					// Fields Check
					"playerID" in request.resource.data &&
					"tierID" in request.resource.data &&
					"name" in request.resource.data &&
					"createdTimestamp" in request.resource.data &&
					// Values Check
					exists(/databases/$(database)/documents/playerCharacterTiers/$(request.resource.data.tierID)); // Tier ID must exist
			}

			// Players can only read their own characters (owned from resource.data.playerID)
			allow read:
				if ownsCharacter();
			

			// Players can only create/update their own data (owned from resource.data.playerID)
			allow create:
				if request.auth != null &&
				request.auth.uid == request.resource.data.playerID && // Players' playerID must be equal to their auth uid
				hasBasicFields() &&
				// Fields Check
				!("approved" in request.resource.data) &&
				// Required: "playerID", "tierID", "name", "createdTimestamp" (4)
				// Optional:  "remarks" (1)
				// Must NOT: "approved" (1)
				// Total: 4 <= size <= 5
				request.resource.data.keys().size() >= 4 &&
				request.resource.data.keys().size() <= 5 &&
				// Values Check
				timeWithin(request.resource.data.createdTimestamp, 300); // createdTimestamp must be within 5 minutes upon the server receiving it

			allow read:
				if isAdmin();

			allow create, update:
				if isAdmin() &&
				hasBasicFields() &&
				// Fields Check
				"level" in request.resource.data &&
				"gold" in request.resource.data &&
				"approved" in request.resource.data &&
				// Required: "playerID", "tierID", "name", "createdTimestamp", "level", "gold", "approved" (7)
				// Optional: "remarks" (1)
				// Total: 7 <= size <= 8
				request.resource.data.keys().size() >= 7 &&
				request.resource.data.keys().size() <= 8 &&
				// Values Check
				levelValid(request.resource.data.level) && // level must be between 1 and 20
				goldValid(request.resource.data.gold); // gold must be a number

		}

		match /playerCharacterTiers/{playerCharacterTierID} {

			// Players are allowed to read all playerCharacterTiers for player creation
			allow read;

			// Admins can do anything to all playerCharacterTiers
			allow write:
				if isAdmin();

		}

		match /logSheets/{logSheetID} {

			// Returns if the player's authenticated uid is equal to the existing Player Character's playerID, and the Player Character is approved
			function ownsCharacter(playerCharacterID) {
				return
					request.auth != null &&
					exists(/databases/$(database)/documents/playerCharacters/$(playerCharacterID)) &&
					request.auth.uid == get(/databases/$(database)/documents/playerCharacters/$(playerCharacterID)).data.playerID &&
					get(/databases/$(database)/documents/playerCharacters/$(playerCharacterID)).data.approved == true; // Player Character must be approved
			}

			function hasBasicFields() {
				return
					// Fields Check
					"playerCharacterID" in request.resource.data &&
					"sessionDate" in request.resource.data &&
					"level" in request.resource.data &&
					"gold" in request.resource.data &&
					"createdTimestamp" in request.resource.data &&
					// Values Check
					levelValid(request.resource.data.level) && // level must be between 1 and 20
					goldValid(request.resource.data.gold); // gold must be a number
			}

			// Only allow players to read their own log sheets
			allow read:
				if ownsCharacter(resource.data.playerCharacterID);

			// Only allow players to create if they own the player character referenced in the log sheet request data
			allow create:
				if hasBasicFields() &&
				// Fields Check
				!("approved" in request.resource.data) &&
				// Required: "playerCharacterID", "sessionDate", "level", "gold", "createdTimestamp" (5)
				// Optional: "remarks" (1)
				// Must NOT: "approved" (1)
				// Total: 5 <= size <= 6
				request.resource.data.keys().size() >= 5 &&
				request.resource.data.keys().size() <= 6 &&
				ownsCharacter(request.resource.data.playerCharacterID) &&
				timeWithin(request.resource.data.createdTimestamp, 300); // createdTimestamp must be within 5 minutes upon the server receiving it

			// Allow admins to update to any log sheet except the ones they own themselves
			allow update:
				if isAdmin() &&
				hasBasicFields() &&
				// Fields Check
				"approved" in request.resource.data &&
				// Required: "playerCharacterID", "sessionDate", "level", "gold", "createdTimestamp", "remarks" (6)
				// Optional: "remarks" (1)
				// Total: 6 <= size <= 7
				request.resource.data.keys().size() >= 6 &&
				request.resource.data.keys().size() <= 7 &&
				!(ownsCharacter(resource.data.playerCharacterID));

			// Allow admins to read all log sheets
			allow read:
				if isAdmin();

		}
    

  	}
}